#!/usr/bin/perl
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# @VERSION@

use strict;
use Getopt::Std;
my $debug = 0;

my $opts = {};
getopts('d:R',$opts);

my @removedips = split(/,/,$opts->{d});

# remove trailing colons from ip/port entries, if exists
removecolon(\@removedips);

if($opts->{R}){
  # restore .save file if -R was passed in
  `mv -f /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.reverted`;
  `mv /etc/haproxy/haproxy.cfg.save /etc/haproxy/haproxy.cfg`;
} else {
  # merge passed config with current config
  logger("reconfigLB got removedips=$opts->{d}");
  `mv -f /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.save`;
  open(FILE,">/etc/haproxy/haproxy.cfg");
  print FILE generate_config();
  close FILE;
}

# graceful restart
`mv /var/run/haproxy.pid /var/run/haproxy.pid.old`;
my $oldpid = `cat /var/run/haproxy.pid.old`;

`kill -TTOU $oldpid`;
sleep 2;

`haproxy -D -p /var/run/haproxy.pid -f /etc/haproxy/haproxy.cfg`;
if ($? == 0) {
  logger("New haproxy instance successfully loaded, stopping previous one.");
  `kill -KILL $oldpid`;
  `rm -f /var/run/haproxy.pid.old`;
  exit 0;
} else {
  logger("New instance failed to start, resuming previous one.");
  `kill -TTIN $oldpid`;
  `rm -f /var/run/haproxy.pid`;
  `mv /var/run/haproxy.pid.old /var/run/haproxy.pid`;
  `mv -f /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.newfail`;
  `mv /etc/haproxy/haproxy.cfg.save /etc/haproxy/haproxy.cfg`;
  exit 1;
}

###########  subs  ###########

sub generate_config {

  my $config;

  open (NEWFILE, "/etc/haproxy/haproxy.cfg.new");
  open (CURFILE, "/etc/haproxy/haproxy.cfg.save");

  # read in new config
  my $sections = {};
  my $section;
  while (my $line = <NEWFILE>) {
    $section = $line if $line =~ /^\w/;
    print "found line for section $section\n" if $debug;
    push @{$sections->{$section}},$line;
  }

  close NEWFILE;

  # fetch old config
  my $oldsections = {};
  my $oldsection;
  while (my $line = <CURFILE>){
    $oldsection = $line if $line =~ /^\w/;

    # skip default, global, and stats lines, we always want the latest
    next if $oldsection =~ /^global/;
    next if $oldsection =~ /^default/;
    next if $oldsection =~ /^listen\sstats/;
    next if $oldsection =~ /^listen\scloud-default/;

    # delete/skip it if it is on remove list
    my $skip = 0;
    foreach my $remip (@removedips) {
      if($oldsection =~ /^listen/ && $oldsection =~ /$remip/){
        $skip = 1;
        print "skipping line for section $oldsection since it is on remove list\n" if $debug;
      }
    }
    next if $skip;

    push @{$oldsections->{$oldsection}},$line;
  }

  close CURFILE;

  # print new config
  print "############  printing new config:\n\n" if $debug;
  foreach my $section (sort keys %{$sections}) {
    foreach my $line(@{$sections->{$section}}) {
      $config .= $line;
    }
    $config .= "\n";
  }

  # add in old config that we didn't get a new config for
  print "############  printing existing config:\n\n" if $debug;
  foreach my $oldsection (sort keys %{$oldsections}) {
    next if exists $sections->{$oldsection};
    foreach my $line(@{$oldsections->{$oldsection}}) {
      $config .= $line;
    }
    $config .= "\n";
  }

  return $config;
}

sub logger {
    my $msg = shift;
    `logger -t cloud $msg`;
}

sub removecolon {
  my $list = shift;
  foreach(@{$list}){
    $_ =~ s/:$//;
  }
}
