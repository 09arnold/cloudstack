#!/usr/bin/env bash
# Copyright 2012 Citrix Systems, Inc. Licensed under the
# Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License.  Citrix Systems, Inc.
# reserves all rights not expressly granted by the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# Automatically generated by addcopyright.py at 04/03/2012

# guestnw.sh -- create/destroy guest network 
# @VERSION@

source /root/func.sh

lock="biglock"
locked=$(getLockFile $lock)
if [ "$locked" != "1" ]
then
    exit 1
fi

usage() {
  printf "Usage:\n %s -A  -c <dev> -g <gateway> -m <network mask> -d <dns ip> -r <dhcp ip range> [-f] \n" $(basename $0) >&2
  printf " %s -D -c <dev>  \n" $(basename $0) >&2
}


setup_dnsmasq() {
  loger -t cloud "Setting up dnsmasq for network $gwIP "
  
  sed -i -e "/^[#]*dhcp-range=interface:$ethDev/d" /etc/dnsmasq.d/cloud.conf

  echo "dhcp-range=interface:$ethDev,$gwIP,static/" >> /etc/dnsmasq.d/cloud.conf

  service dnsmasq restart
  sleep 1
}

desetup_dnsmasq() {
  loger -t cloud "Setting up dnsmasq for network $gwIP "
  
  sed -i -e "/^[#]*dhcp-range=interface:$ethDev/d" /etc/dnsmasq.d/cloud.conf

  service dnsmasq restart
  sleep 1
}


create_network() {
  logger -t cloud " $(basename $0): Create network on interface $ethDev,  gateway $gwIP, network $network, cidr $cidr "

  sudo ip addr add $ethDev $gwIP/$cidr

  # create inbond acl chain
  if sudo iptables -N ACL_INBOND_$gwIP 2>/dev/null
  then
    logger -t cloud "$(basename $0): create VPC inbond acl chain for network $gwIP"
    # policy drop
    sudo iptables -A ACL_INBOND_$gwIP DROP >/dev/null
    sudo iptables -A FORWARD -o $dev -d $gwIP/$cidr -j ACL_INBOND_$gwIP
  fi
  # create outbond acl chain
  if sudo iptables -N ACL_OUTBOND_$gwIP 2>/dev/null
  then
    logger -t cloud "$(basename $0): create VPC outbond acl chain for network $gwIP"
    sudo iptables -A ACL_OUTBOND_$gwIP DROP >/dev/null
    sudo iptables -A FORWARD -i $dev -s $gwIP/$cidr -j ACL_OUTBOND_$gwIP
  fi

  setup_dnsmasq
}

destroy_network() {
  logger -t cloud " $(basename $0): Create network on interface $ethDev,  gateway $gwIP, network $network, cidr $cidr "


  # destroy egress firewall chain
  sudo iptables -t mangle -D PREROUTING -s $gwIP/$cidr -j FIREWALL_EGRESS_$gwIP
  sudo iptables -t mangle -F FIREWALL_EGRESS_$gwIP
  sudo iptables -t mangle -X FIREWALL_EGRESS_$gwIP

  # destroy ingress firewall chain

  sudo iptables -t mangle -D POSTROUTING -o $devDev-d $gwIP/$cidr -j FIREWALL_IEGRESS_$gwIP
  sudo iptables -t mangle -F FIREWALL_INGRESS_$gwIP
  sudo iptables -t mangle -X FIREWALL_INGRESS_$gwIP

  desetup_dnsmasq
}

#set -x
nflag=0
dflag=
cflag=
gflag=
Cflag=
Dflag=

op=""


while getopts 'CDg:n:m:c:v' OPTION
do
  case $OPTION in
  C)	Cflag=1
		op="-C"
		;;
  D)	Dflag=1
		op="-D"
		;;
  n)	nflag=1
		network="$OPTAGR"
		;;
  c)	cflag=1
		cidr="$OPTARG"
		;;
  d)	dflag=1
  		ethDev="$OPTARG"
  		;;
  v)	vflag=1
  		vcidr="$OPTARG"
  		;;

  g)	gflag=1
  		gwIP="$OPTARG"
  		;;
  ?)	usage
                unlock_exit 2 $lock $locked
		;;
  esac
done


if [ "$Cflag$Dflag$cflag" != "11" ]
then
    usage
    unlock_exit 2 $lock $locked
fi

if [ "$Cflag" == "1" ] && ["$nflag$mflag$gflag$vflag" != "1111" ] 
then
    usage
    unlock_exit 2 $lock $locked
fi


if [ "$Cflag" == "1" ]
then  
  create_guest_network 
fi


if [ "$Dflag" == "1" ]
then
  destroy_guest_network
fi

unlock_exit 0 $lock $locked
